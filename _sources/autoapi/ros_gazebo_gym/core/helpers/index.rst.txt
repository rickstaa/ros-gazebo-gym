:py:mod:`ros_gazebo_gym.core.helpers`
=====================================

.. py:module:: ros_gazebo_gym.core.helpers

.. autoapi-nested-parse::

   Contains several helper functions that are used by the
   :ros-gazebo-gym:`ros_gazebo_gym <>` package for the setup of the ROS Gazebo Gym
   gymnasium environments.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ros_gazebo_gym.core.helpers.GitProgressCallback
   ros_gazebo_gym.core.helpers.PopenAutoCleanup



Functions
~~~~~~~~~

.. autoapisummary::

   ros_gazebo_gym.core.helpers.get_catkin_workspace_path
   ros_gazebo_gym.core.helpers.query_yes_no
   ros_gazebo_gym.core.helpers.get_global_pkg_path
   ros_gazebo_gym.core.helpers.get_local_pkg_path
   ros_gazebo_gym.core.helpers.clone_repo
   ros_gazebo_gym.core.helpers.is_repo_up_to_date
   ros_gazebo_gym.core.helpers.ros_exit_gracefully
   ros_gazebo_gym.core.helpers.build_catkin_ws
   ros_gazebo_gym.core.helpers.install_package
   ros_gazebo_gym.core.helpers.load_ros_params_from_yaml
   ros_gazebo_gym.core.helpers.get_log_path



Attributes
~~~~~~~~~~

.. autoapisummary::

   ros_gazebo_gym.core.helpers.ROSDEP_INDEX_PATH


.. py:data:: ROSDEP_INDEX_PATH
   :value: '../cfg/rosdep.yaml'

   

.. py:class:: GitProgressCallback


   Bases: :py:obj:`pygit2.RemoteCallbacks`

   A :class:`pygit2.RemoteCallbacks` callback that shows a git clone progress bar.

   Initializes the :class:`GitProgressCallback` class.

   .. py:method:: transfer_progress(statsTransferProgress)

      Displays the current git transfer progress.

      :param statsTransferProgress: The progress up to
                                    now.
      :type statsTransferProgress: pygit2.statsTransferProgress



.. py:class:: PopenAutoCleanup(*args, critical=False, **kwargs)


   Bases: :py:obj:`subprocess.Popen`

   A :class:`subprocess.Popen` that cleans up after itself and terminates the
   process when the main Python script exits. It also allows users to specify whether
   the process is critical and show an error message when the process is no longer
   running.

   .. attribute:: critical

      Whether the process is critical and an error message should be
      shown when the process is no longer running.

      :type: bool

   Initializes the :class:`PopenAutoCleanup` class.

   :param \*args: The positional arguments that are passed to the
                  :class:`subprocess.Popen` class.
   :param critical: Whether the process is critical and an error
                    message should be shown when the process is no longer running.
   :type critical: bool, optional
   :param \*\*kwargs: The keyword arguments that are passed to the
                      :class:`subprocess.Popen` class.

   .. py:method:: terminate()

      Terminates the process and stops the critical check thread.


   .. py:method:: kill()

      Kills the process and stops the critical check thread.



.. py:function:: get_catkin_workspace_path()

   Retrieve the path of the currently sourced catkin workspace.

   :returns:

             The path of the currently sourced catkin workspace. Returns ``None`` if no
                 catkin workspace was sourced.
   :rtype: str


.. py:function:: query_yes_no(question, default='yes')

   Ask the user a yes/no question via raw_input() and return the answer.

   :param question: String presented to the user.
   :type question: str
   :param default: The presumed answer if the user just hits <Enter>. It
                   must be "yes" (the default), "no" or None (meaning an answer is required of
                   the user). Defaults to "yes".
   :type default: str, optional

   :raises ValueError: If the default answer is not correct.

   :returns: Returns the given answer.
   :rtype: str

   .. seealso::
       This function was based on the function given by `@fmark <https://stackoverflow.com/users/103225/fmark>`_ in
       `this stackoverflow question <https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input>`_


.. py:function:: get_global_pkg_path(package_name, workspace_path=None)

   Retrieves the global package path. Meaning the path of a package if it is
   contained in the global ROS workspace. Returns ``None`` if the package is not
   found.

   :param package_name: The name of the package you want to check.
   :type package_name: str

   :returns: The global package path.
   :rtype: str


.. py:function:: get_local_pkg_path(package_name, catkin_workspace)

   Retrieves the local package path. Meaning the path of a package in the catkin
   workspace. Returns ``None`` if package is not found in the catkin workspace.

   :param package_name: The name of the package you want to check.
   :type package_name: str
   :param catkin_workspace: The catkin_workspace you want to check.
   :type catkin_workspace: str

   :returns: The local package path.
   :rtype: str


.. py:function:: clone_repo(path, git_src, branch=None, recursive=False)

   Clones the repository of the dependency.

   :param path: The path to which you want to clone the repository.
   :type path: str
   :param git_src: The git repository url.
   :type git_src: str
   :param branch: The branch to checkout. Defaults to ``None``.
   :type branch: str, optional
   :param recursive: After the clone is created, initialize and clone
                     submodules within based on the provided pathspec. Defaults to ``False``.
   :type recursive: bool, optional


.. py:function:: is_repo_up_to_date(repo_path)

   Checks if the local repository is up to date with the remote repository.

   :param repo_path: The path of the local repository.
   :type repo_path: str

   :returns: Whether the local repository is up to date with the remote repository.
   :rtype: bool


.. py:function:: ros_exit_gracefully(shutdown_msg=None, exit_code=0)

   Shuts down the ROS node wait until it is shutdown and exits the script.

   :param shutdown_msg: The shutdown message. Defaults to ``None``.
   :type shutdown_msg: str, optional
   :param exit_code: The exit code. Defaults to ``0``.
   :type exit_code: int, optional


.. py:function:: build_catkin_ws(workspace_path, install_ros_deps=False)

   Builds the catkin workspace and installs system dependencies while doing so if
   requested.

   :param workspace_path: The path of the catkin workspace.
   :type workspace_path: str
   :param install_ros_deps: Whether you also want to install the system
                            dependencies using rosdep before building the workspace. Defaults to
                            ``False``.
   :type install_ros_deps: bool, optional

   :raises Exception: When something goes wrong while re-building the workspace.


.. py:function:: install_package(package_name, workspace_path=None, outdated_warning=True)

   Install a given ROS package together with it's dependencies.

   This function checks if a ROS package is installed and installs it if this is not
   the case. It uses the :ros-gazebo-gym:`ros_gazebo_gym <>` package dependency index to
   clone the package and dependencies in the local catkin workspace and subsequently
   rebuilds this workspace. It also throws a warning if a package is installed but not
   up to date.

   :param package_name: The package you want to install.
   :type package_name: str
   :param workspace_path: The catkin workspace path. Defaults to ``None``
                          (i.e. path will be determined).
   :type workspace_path: str, optional
   :param outdated_warning: Whether to show a update warning when the
                            package is outdated. Defaults to ``True``.
   :type outdated_warning: bool, optional

   :returns: Whether the package and its dependencies are installed.
   :rtype: bool


.. py:function:: load_ros_params_from_yaml(yaml_file_path, ros_package_name=None)

   Loads ros parameters from yaml file.

   :param yaml_file_path: The configuration file path. Can be absolute or relative.
                          If relative, the path is relative to the package directory.
   :type yaml_file_path: str
   :param package_name: The package name that contains the configuration file.
                        Defaults to ``None``.
   :type package_name: str

   :raises rosparam.RosParamException: If the yaml file could not be loaded or the
       ROS package could not be found.


.. py:function:: get_log_path()

   Returns the 'ros_gazebo_gym' package log folder path.

   :returns: The package log folder path.
   :rtype: :obj:`pathlib.Path`


