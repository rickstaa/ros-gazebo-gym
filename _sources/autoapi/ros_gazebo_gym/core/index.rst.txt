:py:mod:`ros_gazebo_gym.core`
=============================

.. py:module:: ros_gazebo_gym.core

.. autoapi-nested-parse::

   Contains the core functions and classes that are used to setup the
   :ros-gazebo-gym:`ros_gazebo_gym <>` gymnasium environments. This contains functions for
   download the required dependencies, starting ROS launch files, connecting to the gazebo
   simulation and controllers, etc.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   controllers_connection/index.rst
   gazebo_connection/index.rst
   helpers/index.rst
   lazy_importer/index.rst
   ros_launcher/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ros_gazebo_gym.core.ControllersConnection
   ros_gazebo_gym.core.GazeboConnection
   ros_gazebo_gym.core.LazyImporter
   ros_gazebo_gym.core.ROSLauncher




.. py:class:: ControllersConnection(namespace='', controllers_list=None)


   Class that contains several methods that can be used to interact with the
   `ros_control <https://wiki.ros.org/ros_control>`_ controllers.

   .. attribute:: list_service_name

      The name of the controller list service.

      :type: str

   .. attribute:: list_service

      The controller
      list service.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: switch_service_name

      The name of the controller switch service.

      :type: str

   .. attribute:: switch_service

      The controller
      switch service.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   Initialize the ControllersConnection instance.

   :param namespace: The namespace on which the robot controllers can
                     be found. Defaults to ``""``.
   :type namespace: str, optional
   :param controllers_list: A list with currently available
                            controllers to look for. Defaults to ``None``, which means that the
                            class will try to retrieve all the running controllers.
   :type controllers_list: list, optional

   .. py:property:: controllers_list

      Returns the list of available controllers.

   .. py:property:: gazebo

      Returns whether a ROS Gazebo simulation is running.

   .. py:property:: gazebo_paused

      Returns whether the Gazebo simulation is paused.

   .. py:method:: switch_controllers(controllers_on, controllers_off, strictness=1, timeout=0.0)

      Function used to switch controllers on and off.

      :param controllers_on: The controllers you want to turn on.
      :type controllers_on: list
      :param controllers_off: The controllers you want to turn off.
      :type controllers_off: list
      :param strictness: Whether the switching will fail if anything goes
                         wrong. Defaults to ``1``.
      :type strictness: int, optional
      :param timeout: The timeout before the request is cancelled. Defaults to
                      ``0.0`` meaning no timeout.
      :type timeout: float

      :returns: Boolean specifying whether the switch was successful.
      :rtype: bool


   .. py:method:: reset_controllers(timeout=1.0)

      Resets the currently running controllers by turning them off and on.

      :param timeout: The timeout before the request is cancelled. Defaults to
                      ``0.0`` meaning no timeout.
      :type timeout: float


   .. py:method:: pause_controllers(controller_list=None, filter_list=[])

      Pauses controllers.

      :param controller_list: The controllers you want to pause.
                              Defaults to ``None``, which means that the class will pause all the
                              running controllers.
      :type controller_list: list, optional
      :param filter_list: The controllers you want to ignore when
                          pausing. Defaults to ``[]``.
      :type filter_list: list, optional


   .. py:method:: unpause_controllers()

      Unpauses all the paused controllers.

      :returns: Boolean specifying whether the unpause was successful.
      :rtype: bool



.. py:class:: GazeboConnection(reset_world_or_sim='WORLD', max_retry=20, retry_rate=5, log_reset=True)


   Class that contains several methods that can be used to interact with the Gazebo
   simulation.

   .. attribute:: pause_proxy

      ROS service that
      pauses the gazebo simulator.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: unpause_proxy

      ROS service that
      un-pauses the gazebo simulator.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: reset_simulation_proxy

      ROS
      service that resets the gazebo simulator.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: reset_world_proxy

      ROS service
      that resets the gazebo world.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: spawn_sdf_proxy

      ROS service
      that spawns a sdf model.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: spawn_urdf_proxy

      ROS service
      that spawns a urdf model.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: get_model_state_proxy

      ROS
      service used to set get model states.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: set_model_state_proxy

      ROS
      service used to set the model state of a object.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: set_link_state_proxy

      ROS
      service used to set the link states.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: get_link_state_proxy

      ROS
      service used to get the link states.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: set_model_configuration_proxy

      ROS service that sets the configuration of a model.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: get_physics_proxy

      ROS
      service used to retrieve the physics properties.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   .. attribute:: set_physics_proxy

      ROS
      service used to set the physics properties.

      :type: :obj:`rospy.impl.tcpros_service.ServiceProxy`

   Initiate the GazeboConnection instance.

   :param reset_world_or_sim: Whether you want to reset the whole
                              simulation "SIMULATION" at startup or only the world "WORLD" (object
                              positions). Defaults to "WORLD".
   :type reset_world_or_sim: str, optional
   :param max_retry: How many times a command to the simulator is
                     retried before giving up. Defaults to ``30``.
   :type max_retry: int, optional
   :param retry_rate: The rate at which the retry is done. Defaults to
                      ``2`` (i.e. 0.5 seconds).
   :type retry_rate: int, optional
   :param log_reset: Whether we want to print a log statement when
                     the world/simulation is reset. Defaults to ``True``.
   :type log_reset: bool, optional

   .. py:property:: physics_properties

      Retrieves the physics properties from gazebo.

   .. py:property:: time

      Retrieves the Gazebo time.

   .. py:method:: pause_sim()

      Pause the simulation.


   .. py:method:: unpause_sim()

      Unpauses the simulation.


   .. py:method:: reset_sim()

      Reset the simulation or the world.

      .. note::
          Implemented like this since in some simulations, when reset the simulation
          the systems that work with TF break. In this case we ONLY resets the object
          position, not the entire simulation.


   .. py:method:: get_model_state(model_name)

      Retrieve the current state of a model.

      :param model_name: The name of the model for which you want to retrieve the
                         state.
      :type model_name: str

      :returns: The pose of the model.
      :rtype: :obj:`numpy.ndarray`

      :raises ros_gazebo_gym.exceptions.GetModelStateError: Thrown when the model
          state retrieval failed.


   .. py:method:: set_model_state(model_state)

      Sets the state of a model.

      :param model_state: The model_state object.
      :type model_state: :obj:`gazebo_msgs.msg.SetModelState`

      :returns: Boolean specifying whether the model state was set successfully.
      :rtype: bool

      :raises ros_gazebo_gym.exceptions.SetModelStateError: Thrown when the model
          state could not be set.


   .. py:method:: get_link_state(link_name)

      Retrieve the current state of a model.

      :param link_name: The name of the robot link.
      :type link_name: str

      :returns: The pose of the robot link.
      :rtype: :obj:`numpy.ndarray`

      :raises GetLinkStateError: Thrown when the link state retrieval failed.


   .. py:method:: set_model_configuration(model_name, joint_names, joint_positions, pause=True)

      Sets the configuration of a model.

      :param model_name: Model to set the configuration for.
      :type model_name: string
      :param joint_names: The joint names for which you want to set the
                          configuration.
      :type joint_names: list
      :param joint_positions: The joint positions you want to set.
      :type joint_positions: list
      :param pause: Pause the simulation while setting the model pose.
                    Defaults to ``True``.
      :type pause: bool, optional

      :returns:

                Boolean specifying whether the model configuration was set
                    successfully.
      :rtype: bool

      :raises ros_gazebo_gym.exceptions.SetModelConfigurationError: Thrown when the
          model configuration could not be set.


   .. py:method:: get_physics_properties()

      Retrieve physics properties from gazebo.

      :returns:

                Physics properties
                    message.
      :rtype: :obj:`gazebo_msgs.srv.GetPhysicsPropertiesResponse`

      :raises ros_gazebo_gym.errors.GetPhysicsPropertiesError: Thrown when
          something goes wrong while trying to retrieve the physics properties.


   .. py:method:: set_physics_properties(**kwargs)

      Change physics properties of the gazebo physics engine. These properties have
      to be supplied as a keyword argument.

      .. tip::
          You can use the :obj:`GazeboConnection.set_physics_proxy` If you want to
          send a :obj:`gazebo_msgs.srv.SetPhysicsProperties` message directly.

      :param \*\*kwargs: Keyword arguments specifying the physics properties you want to
                         set.

      :raises SetPhysicsPropertiesError: Thrown when something goes wrong while setting
          the physics properties.


   .. py:method:: change_gravity(x, y, z)

      Changes the gravity vector

      :param x: Gravity vector x coordinate.
      :type x: float
      :param y: Gravity vector y coordinate.
      :type y: float
      :param z: Gravity vector z coordinate.
      :type z: float


   .. py:method:: spawn_object(object_name, model_name, models_folder_path, pose=None)

      Spawns a object from the model directory into gazebo.

      :param object_name: The name you want the model to have.
      :type object_name: str
      :param model_name: The model type (The name of the xml file you want to use).
      :type model_name: str
      :param models_folder_path: The folder in which you want to search for the
                                 models.
      :type models_folder_path: str
      :param pose: The pose of the model, by
                   default :py:class:`geometry_msgs.msg.Pose`.
      :type pose: :obj:`geometry_msgs.msg.Pose`, optional

      :returns: A boolean specifying whether the model was successfully spawned.
      :rtype: bool

      :raises ros_gazebo_gym.exceptions.SpawnModelError: When model was not spawned
          successfully.



.. py:class:: LazyImporter(module_name)


   A class for importing modules lazily.

   This class can be used to import modules and module objects lazily. It caches
   imported modules and module objects to avoid repeated imports.

   .. attribute:: module_name

      The name of the module to import.

      :type: str

   Initialize a new LazyImporter object.

   :param module_name: The name of the module to import.
   :type module_name: str


.. py:class:: ROSLauncher


   Bases: :py:obj:`object`

   Class used to launch ROS launch files.

   .. attribute:: successful

      Whether the launch file was successfully launched. *This
      only specifies if the launchfile was successfully executed not if it
      encountered errors*.

      :type: bool

   .. py:attribute:: launched

      

   .. py:method:: initialize()
      :classmethod:

      Make sure a ros master is running and ROS is initialized.


   .. py:method:: list_processes()
      :classmethod:

      List all launched processes.


   .. py:method:: terminate(process_name)
      :classmethod:

      Terminate a launched process.

      :param process_name: The process name.
      :type process_name: str


   .. py:method:: terminate_all()
      :classmethod:

      Terminate all launched processes.


   .. py:method:: launch(package_name, launch_file_name, workspace_path=None, log_file=None, critical=False, wait_time=2, outdated_warning=False, **kwargs)
      :classmethod:

      Launch a given launchfile while also installing the launchfile package and or
      dependencies. This is done by using the ros_gazebo_gym dependency index.

      :param package_name: The package that contains the launchfile.
      :type package_name: str
      :param launch_file_name: The launchfile name.
      :type launch_file_name: str
      :param workspace_path: The path of the catkin workspace. Defaults
                             to ``None`` meaning the path will be determined.
      :type workspace_path: str, optional
      :param log_file: The log file to write the ``stdout`` to. Defaults
                       to ``None`` meaning the ``stdout`` will be written to console.
      :type log_file: str, optional
      :param critical: Whether the process is critical and an error
                       message should be shown when the process is no longer running.
      :type critical: bool, optional
      :param wait_time: The time to wait before checking if the was
                        launched successfully and is still running. Defaults to ``2``.
      :type wait_time: int, optional
      :param outdated_warning: Whether to show a update warning when the
                               package is outdated. Defaults to ``False``.
      :type outdated_warning: bool, optional
      :param \*\*kwargs: Keyword arguments you want to pass to the launchfile.

      :raises Exception: When something went wrong when launching the launchfile.



